import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  ActivityIndicator,
  SafeAreaView,
  Platform,
  TouchableOpacity, // D√πng cho c√°c button
  Image, // D√πng cho h√¨nh ·∫£nh s·∫£n ph·∫©m
  RefreshControl, // D√πng cho ch·ª©c nƒÉng k√©o xu·ªëng l√†m m·ªõi
  Alert, // D√πng cho th√¥ng b√°o x√°c nh·∫≠n x√≥a
} from "react-native";

// Import icons t·ª´ react-native-vector-icons
import Feather from "react-native-vector-icons/Feather";
import MaterialCommunityIcons from "react-native-vector-icons/MaterialCommunityIcons";

const CartScreen = () => {
  const [cartData, setCartData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [refreshing, setRefreshing] = useState(false); // State cho ch·ª©c nƒÉng k√©o xu·ªëng l√†m m·ªõi

  // THAY TH·∫æ 'YOUR_LOCAL_IP_ADDRESS' B·∫∞NG ƒê·ªäA CH·ªà IP C·ª§ TH·ªÇ C·ª¶A M√ÅY T√çNH B·∫†N
  // ƒê√£ c√≥ s·∫µn ƒë·ªãa ch·ªâ IP trong code c·ªßa b·∫°n: http://192.168.75.1:3000/api/cart
  const API_URL = "http://192.168.75.1:3000/api/cart";

  // TOKEN C·ª¶A B·∫†N - L∆ØU √ù: TRONG ·ª®NG D·ª§NG TH·ª∞C T·∫æ, TOKEN N√ÄY PH·∫¢I ƒê∆Ø·ª¢C L∆ØU TR·ªÆ AN TO√ÄN (v√≠ d·ª•: AsyncStorage)
  // V√Ä L·∫§Y RA KHI C·∫¶N, KH√îNG N√äN HARDCODE NH∆Ø TH·∫æ N√ÄY.
  const AUTH_TOKEN =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4N2UwNDI0MzBhNmQ3OWNmODllNGI3NSIsImlhdCI6MTc1MzEwOTU1MywiZXhwIjoxNzUzMTEwNzUzfQ.19Nx6oV0-pYwvUNnWABc0SWyRmpSdpgoeCuU-zxZBSM";

  const fetchCartData = async () => {
    try {
      setLoading(true); // ƒê·∫∑t l·∫°i loading khi b·∫Øt ƒë·∫ßu fetch
      setError(null); // X√≥a l·ªói c≈©
      const response = await fetch(API_URL, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${AUTH_TOKEN}`,
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          `HTTP error! Status: ${response.status}. Message: ${
            errorData.message || "Unknown error"
          }`
        );
      }

      const data = await response.json();
      setCartData(data);
    } catch (err) {
      setError(err.message);
      console.error("Fetch Cart Error:", err);
    } finally {
      setLoading(false);
      setRefreshing(false); // D·ª´ng refreshing sau khi fetch xong
    }
  };

  useEffect(() => {
    fetchCartData();
  }, []); // Ch·∫°y m·ªôt l·∫ßn khi component mount

  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  const updateQuantity = async (
    itemId,
    productId,
    currentQuantity,
    newQuantity
  ) => {
    if (newQuantity < 1) {
      removeItem(itemId);
      return;
    }

    // T·ªëi ∆∞u: N·∫øu s·ªë l∆∞·ª£ng kh√¥ng ƒë·ªïi, kh√¥ng l√†m g√¨
    if (newQuantity === currentQuantity) return;

    // C·∫≠p nh·∫≠t giao di·ªán ngay l·∫≠p t·ª©c ƒë·ªÉ c√≥ ph·∫£n h·ªìi nhanh (Optimistic Update)
    const prevCartData = cartData; // L∆∞u tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ ƒë·ªÉ rollback n·∫øu c√≥ l·ªói
    setCartData((prevData) => ({
      ...prevData,
      items: prevData.items.map((item) =>
        item._id === itemId ? { ...item, quantity: newQuantity } : item
      ),
    }));

    try {
      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tr√™n backend
      const response = await fetch(`${API_URL}/update/${productId}`, {
        // Gi·∫£ s·ª≠ c√≥ endpoint n√†y
        method: "PUT", // Ho·∫∑c 'PUT'
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${AUTH_TOKEN}`,
        },
        body: JSON.stringify({ quantity: newQuantity }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          `Failed to update quantity: ${response.status}. Message: ${
            errorData.message || "Unknown error"
          }`
        );
      }
      // N·∫øu th√†nh c√¥ng, kh√¥ng l√†m g√¨ (v√¨ ƒë√£ c·∫≠p nh·∫≠t optimistic)
    } catch (err) {
      Alert.alert("L·ªói", `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: ${err.message}`);
      // Ho√†n t√°c l·∫°i tr·∫°ng th√°i c≈© n·∫øu c√≥ l·ªói
      setCartData(prevCartData);
      console.error("Error updating quantity:", err);
    }
  };

  const removeItem = (productId) => {
    Alert.alert(
      "X√°c nh·∫≠n x√≥a",
      "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?",
      [
        {
          text: "H·ªßy",
          style: "cancel",
        },
        {
          text: "X√≥a",
          onPress: async () => {
            // Optimistic update
            const prevCartData = cartData;
            setCartData((prevData) => ({
              ...prevData,
              items: prevData.items.filter((item) => item._id !== productId),
            }));

            try {
              // G·ªçi API ƒë·ªÉ x√≥a s·∫£n ph·∫©m tr√™n backend
              const response = await fetch(`${API_URL}/remove/${productId}`, {
                // Gi·∫£ s·ª≠ c√≥ endpoint n√†y
                method: "DELETE", // Ho·∫∑c 'DELETE'
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${AUTH_TOKEN}`,
                },
                body: JSON.stringify({ productId }),
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(
                  `Failed to remove item: ${response.status}. Message: ${
                    errorData.message || "Unknown error"
                  }`
                );
              }
              // N·∫øu th√†nh c√¥ng, kh√¥ng l√†m g√¨ (v√¨ ƒë√£ c·∫≠p nh·∫≠t optimistic)
            } catch (err) {
              Alert.alert("L·ªói", `Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m: ${err.message}`);
              // Ho√†n t√°c l·∫°i tr·∫°ng th√°i c≈© n·∫øu c√≥ l·ªói
              setCartData(prevCartData);
              console.error("Error removing item:", err);
            }
          },
        },
      ],
      { cancelable: false }
    );
  };

  const calculateTotal = () => {
    if (!cartData?.items) return 0;
    return cartData.items.reduce((total, item) => {
      return total + item.productId.price * item.quantity;
    }, 0);
  };

  const handleCheckout = () => {
    Alert.alert(
      "Thanh to√°n",
      `T·ªïng ti·ªÅn: ${formatPrice(calculateTotal())}\nTi·∫øn h√†nh thanh to√°n!`
      // ·ªû ƒë√¢y b·∫°n s·∫Ω ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh thanh to√°n ho·∫∑c g·ªçi API thanh to√°n
    );
  };

  const onRefresh = React.useCallback(() => {
    setRefreshing(true);
    fetchCartData(); // G·ªçi l·∫°i h√†m fetch data
  }, []);

  if (loading) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <View style={styles.loadingContent}>
          <Feather
            name="loader"
            size={48}
            color="#FF6347"
            style={styles.loadingIcon}
          />
          <Text style={styles.loadingText}>ƒêang t·∫£i gi·ªè h√†ng...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.headerButton}
          onPress={() => Alert.alert("Th√¥ng b√°o", "Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc")}
        >
          <Feather name="arrow-left" size={24} color="#4A4A4A" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Gi·ªè h√†ng</Text>
        <View style={styles.cartCountBadge}>
          <Text style={styles.cartCountText}>
            {cartData?.items?.length || 0}
          </Text>
        </View>
      </View>

      {/* Cart Items */}
      <FlatList
        data={cartData?.items}
        keyExtractor={(item) => item._id}
        contentContainerStyle={styles.listContentContainer}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={["#FF6347"]}
            tintColor="#FF6347"
          />
        }
        ListHeaderComponent={() => (
          <View style={styles.refreshHintContainer}>
            <Text style={styles.refreshHintText}>K√©o xu·ªëng ƒë·ªÉ l√†m m·ªõi</Text>
          </View>
        )}
        renderItem={({ item }) => (
          <View style={styles.itemContainer}>
            <View style={styles.itemImageWrapper}>
              {item.productId.image ? (
                <Image
                  source={{
                    uri: `http://192.168.75.1:3000/${item.productId.image.replace(
                      /\\/g,
                      "/"
                    )}`,
                  }} // C·∫ßn ƒëi·ªÅu ch·ªânh base URL cho h√¨nh ·∫£nh
                  style={styles.itemImage}
                  resizeMode="cover"
                />
              ) : (
                <View style={styles.noImagePlaceholder}>
                  <Text style={styles.noImageIcon}>üìö</Text>
                  <Text style={styles.noImageText}>Kh√¥ng ·∫£nh</Text>
                </View>
              )}
            </View>

            <View style={styles.itemDetails}>
              <Text style={styles.itemTitle} numberOfLines={2}>
                {item.productId.title}
              </Text>
              <Text style={styles.itemAuthor}>
                T√°c gi·∫£: {item.productId.author}
              </Text>
              <Text style={styles.itemCategory}>{item.productId.category}</Text>
              <Text style={styles.itemPrice}>
                {formatPrice(item.productId.price)}
              </Text>
            </View>

            <View style={styles.quantityControls}>
              <TouchableOpacity
                style={styles.quantityButton}
                onPress={() =>
                  updateQuantity(
                    item._id,
                    item.productId._id,
                    item.quantity,
                    item.quantity + 1
                  )
                }
              >
                <Feather name="plus" size={20} color="#FF6347" />
              </TouchableOpacity>
              <Text style={styles.itemQuantityText}>{item.quantity}</Text>
              <TouchableOpacity
                style={styles.quantityButton}
                onPress={() =>
                  updateQuantity(
                    item._id,
                    item.productId._id,
                    item.quantity,
                    item.quantity - 1
                  )
                }
              >
                <Feather name="minus" size={20} color="#FF6347" />
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.removeButton}
                onPress={() => removeItem(item._id)}
              >
                <Feather name="trash-2" size={20} color="#E53935" />
              </TouchableOpacity>
            </View>
          </View>
        )}
        ListEmptyComponent={() => (
          <View style={styles.emptyCartContainer}>
            <MaterialCommunityIcons name="cart-off" size={80} color="#CCC" />
            <Text style={styles.emptyCartTitle}>Gi·ªè h√†ng tr·ªëng</Text>
            <Text style={styles.emptyCartText}>
              H√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
            </Text>
          </View>
        )}
      />

      {/* Footer (T·ªïng c·ªông v√† Thanh to√°n) */}
      {cartData?.items?.length > 0 && (
        <View style={styles.footer}>
          <View style={styles.totalContainer}>
            <Text style={styles.totalLabel}>T·ªïng c·ªông:</Text>
            <Text style={styles.totalAmount}>
              {formatPrice(calculateTotal())}
            </Text>
          </View>
          <TouchableOpacity
            style={styles.checkoutButton}
            onPress={handleCheckout}
          >
            <Text style={styles.checkoutButtonText}>Thanh to√°n</Text>
            <Feather name="arrow-right" size={20} color="#FFF" />
          </TouchableOpacity>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F8F8F8", // bg-gray-50
    paddingTop:
      Platform.OS === "android" ? (Platform.Version >= 21 ? 0 : 25) : 0, // ƒêi·ªÅu ch·ªânh cho status bar
  },
  loadingContainer: {
    flex: 1,
    backgroundColor: "#F8F8F8",
    justifyContent: "center",
    alignItems: "center",
  },
  loadingContent: {
    alignItems: "center",
  },
  loadingIcon: {
    // animate-spin kh√¥ng c√≥ trong StyleSheet, c·∫ßn animation ri√™ng ho·∫∑c CSS-like properties
    // Ch√∫ng ta s·∫Ω b·ªè qua animation cho icon trong StyleSheet v√† d·ª±a v√†o ActivityIndicator
  },
  loadingText: {
    color: "#6B7280", // text-gray-600
    fontSize: 18, // text-lg
    marginTop: 10,
  },

  // Header Styles
  header: {
    backgroundColor: "#FFF", // bg-white
    paddingHorizontal: 20, // px-5
    paddingVertical: 15, // py-4
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    shadowColor: "#000", // shadow-sm
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    elevation: 2, // for Android shadow
    borderBottomWidth: 1,
    borderColor: "#E5E7EB", // border-b border-gray-200
  },
  headerButton: {
    padding: 5, // p-1
  },
  headerTitle: {
    fontSize: 20, // text-xl
    fontWeight: "600", // font-semibold
    color: "#1F2937", // text-gray-800
    flex: 1,
    textAlign: "center",
  },
  cartCountBadge: {
    backgroundColor: "#EF4444", // bg-pink-500, thay b·∫±ng m√†u h·ªìng ƒë·∫≠m h∆°n cho d·ªÖ nh√¨n
    borderRadius: 9999, // rounded-full
    minWidth: 24, // min-w-6
    height: 24, // h-6
    justifyContent: "center",
    alignItems: "center",
    paddingHorizontal: 6, // px-2
  },
  cartCountText: {
    color: "#FFF", // text-white
    fontSize: 12, // text-xs
    fontWeight: "600", // font-semibold
  },

  // Cart Items List Styles
  listContentContainer: {
    paddingHorizontal: 16, // px-4
    paddingVertical: 8, // py-2
  },
  refreshHintContainer: {
    alignItems: "center",
    justifyContent: "center",
    marginBottom: 10,
    paddingTop: 8,
  },
  refreshHintText: {
    fontSize: 12,
    color: "#6B7280",
  },
  itemContainer: {
    backgroundColor: "#FFF", // bg-white
    borderRadius: 12, // rounded-xl
    padding: 16, // p-4
    marginBottom: 16, // mb-4
    flexDirection: "row",
    alignItems: "center",
    shadowColor: "#000", // shadow-sm
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    elevation: 2,
  },
  itemImageWrapper: {
    width: 80, // w-20
    height: 96, // h-24
    backgroundColor: "#E5E7EB", // bg-gray-200
    borderRadius: 8, // rounded-lg
    justifyContent: "center",
    alignItems: "center",
    marginRight: 16, // mr-4
    overflow: "hidden", // ƒê·ªÉ ƒë·∫£m b·∫£o ·∫£nh bo g√≥c
  },
  itemImage: {
    width: "100%",
    height: "100%",
  },
  noImagePlaceholder: {
    justifyContent: "center",
    alignItems: "center",
  },
  noImageIcon: {
    fontSize: 24, // text-xs t∆∞∆°ng ƒë∆∞∆°ng font size nh·ªè, tƒÉng l√™n cho icon to h∆°n
    color: "#9CA3AF", // text-gray-400
  },
  noImageText: {
    fontSize: 10, // text-xs
    color: "#9CA3AF",
  },
  itemDetails: {
    flex: 1, // flex-1
    marginRight: 8, // mr-2
  },
  itemTitle: {
    fontWeight: "600", // font-semibold
    color: "#1F2937", // text-gray-800
    fontSize: 16, // text-base
    marginBottom: 4, // mb-1
  },
  itemAuthor: {
    color: "#4B5563", // text-gray-600
    fontSize: 14, // text-sm
    marginBottom: 4, // mb-1
  },
  itemCategory: {
    backgroundColor: "#F3F4F6", // bg-gray-100
    color: "#4B5563", // text-gray-600
    fontSize: 12, // text-xs
    paddingHorizontal: 8, // px-2
    paddingVertical: 4, // py-1
    borderRadius: 4, // rounded
    alignSelf: "flex-start", // inline-block
    marginBottom: 8, // mb-2
  },
  itemPrice: {
    color: "#EF4444", // text-pink-500
    fontWeight: "bold",
    fontSize: 16, // text-base
  },
  quantityControls: {
    alignItems: "center",
  },
  quantityButton: {
    backgroundColor: "#FFEBEE", // bg-pink-50
    borderColor: "#FF6347", // border border-pink-500
    borderWidth: 1,
    borderRadius: 9999, // rounded-full
    width: 36, // w-9
    height: 36, // h-9
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 4, // mb-1
  },
  itemQuantityText: {
    color: "#1F2937", // text-gray-800
    fontWeight: "600", // font-semibold
    fontSize: 16, // text-base
    marginVertical: 8, // my-2
    minWidth: 24, // min-w-6
    textAlign: "center",
  },
  removeButton: {
    backgroundColor: "#FFEBEB", // bg-red-50
    borderRadius: 9999, // rounded-full
    width: 36, // w-9
    height: 36, // h-9
    justifyContent: "center",
    alignItems: "center",
    marginTop: 8, // Th√™m ch√∫t kho·∫£ng c√°ch
  },

  // Empty Cart Styles
  emptyCartContainer: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 80, // py-20
  },
  emptyCartTitle: {
    fontSize: 18, // text-lg
    fontWeight: "600", // font-semibold
    color: "#4B5563", // text-gray-600
    marginBottom: 8, // mb-2
  },
  emptyCartText: {
    color: "#6B7280", // text-gray-500
  },

  // Footer Styles
  footer: {
    backgroundColor: "#FFF", // bg-white
    paddingHorizontal: 20, // px-5
    paddingVertical: 15, // py-4
    borderTopWidth: 1,
    borderColor: "#E5E7EB", // border-t border-gray-200
    shadowColor: "#000", // shadow-lg (l·ªõn h∆°n shadow-sm)
    shadowOffset: { width: 0, height: -2 }, // Shadow h∆∞·ªõng l√™n
    shadowOpacity: 0.15,
    shadowRadius: 3,
    elevation: 5, // for Android shadow
  },
  totalContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 16, // mb-4
  },
  totalLabel: {
    color: "#4B5563", // text-gray-600
    fontSize: 16, // text-base
  },
  totalAmount: {
    color: "#EF4444", // text-pink-500
    fontWeight: "bold",
    fontSize: 20, // text-xl
  },
  checkoutButton: {
    width: "100%", // w-full
    backgroundColor: "#EF4444", // bg-pink-500
    paddingVertical: 16, // py-4
    borderRadius: 12, // rounded-xl
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    shadowColor: "#EF4444", // shadow-md
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 3,
  },
  checkoutButtonText: {
    color: "#FFF", // text-white
    fontWeight: "600", // font-semibold
    fontSize: 18, // text-lg
    marginRight: 8, // mr-2
  },
});

export default CartScreen;
